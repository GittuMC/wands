plugins {
    id "com.github.johnrengelman.shadow" version "${shadow_version}"
}
architectury {
    platformSetupLoomIde()
    fabric()
}
repositories {
    maven{
        url "https://maven.terraformersmc.com/releases"
    }
}
configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    // Remove the next line if you don't want to depend on the API    
    modApi "${rootProject.architectury}:architectury-fabric:${rootProject.architectury_version}"

    modImplementation "com.terraformersmc:modmenu:${rootProject.modmenu_version}"

    modApi("me.shedaniel.cloth:cloth-config-fabric:${rootProject.cloth_config}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    common(project(path: ":common", configuration: "dev")) {
        transitive = false
    }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) {
        transitive = false
    }
}

processResources {
    
    inputs.property "modid", rootProject.modid
    inputs.property "version", project.version
    inputs.property "min_fabric_loader_version", rootProject.min_fabric_loader_version
    inputs.property "min_minecraft_version", rootProject.min_minecraft_version
    inputs.property "min_architectury", rootProject.min_architectury
    inputs.property "modmenu_version", rootProject.modmenu_version
    inputs.property "cloth_config", rootProject.cloth_config

    filesMatching("fabric.mod.json") {
        expand (
            "modid": rootProject.modid,
            "version": project.version,
            "min_fabric_loader_version":  rootProject.min_fabric_loader_version,
            "min_minecraft_version": rootProject.min_minecraft_version,
            "min_architectury": rootProject.min_architectury,
            "modmenu_version":rootProject.modmenu_version,
            "cloth_config":rootProject.cloth_config
        )
    }
}
shadowJar {
    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier "fabric"
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

plugins {    
    id "com.github.johnrengelman.shadow" version "${shadow_version}"
}
loom {
    forge {
        mixinConfig "wands-common.mixins.json"
        mixinConfig "wands.mixins.json"
    }
}
architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}



dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    
    modApi "${rootProject.architectury}:architectury-forge:${rootProject.architectury_version}"
    //api(fg.deobf("me.shedaniel.cloth:cloth-config-forge:${rootProject.cloth_config}"))
    modApi("me.shedaniel.cloth:cloth-config-forge:${rootProject.cloth_config}")
    common(project(path: ":common", configuration: "dev")) {
        transitive = false
    }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) {
        transitive = false
    }

}

processResources {
    inputs.property "modid", rootProject.modid
    inputs.property "version", rootProject.version
    inputs.property "min_forge_loader", rootProject.min_forge_loader
    inputs.property "min_minecraft_version", rootProject.min_minecraft_version
    inputs.property "min_architectury", rootProject.min_architectury
    filesMatching("META-INF/mods.toml") {
        expand (
            "modid": rootProject.modid,
            "version": rootProject.version,
            "min_forge_loader":  rootProject.min_forge_loader,
            "min_minecraft_version": rootProject.min_minecraft_version,
            "min_architectury": rootProject.min_architectury
        )
    }
}
shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier "forge"
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

